/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Login
     * @description OAuth2 compatible token login, get an access token for future requests
     */
    post: operations["login_api_v1_auth_login_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/users/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Read Users
     * @description Retrieve users.
     */
    get: operations["read_users_api_v1_users__get"];
    put?: never;
    /**
     * Create User
     * @description Create new user.
     */
    post: operations["create_user_api_v1_users__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Read User Me
     * @description Get current user.
     */
    get: operations["read_user_me_api_v1_users_me_get"];
    /**
     * Update User Me
     * @description Update own user.
     */
    put: operations["update_user_me_api_v1_users_me_put"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/users/{user_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Read User By Id
     * @description Get a specific user by id.
     */
    get: operations["read_user_by_id_api_v1_users__user_id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/workflows/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Read Workflows
     * @description Retrieve workflows for current user.
     */
    get: operations["read_workflows_api_v1_workflows__get"];
    put?: never;
    /**
     * Create Workflow
     * @description Create new workflow.
     */
    post: operations["create_workflow_api_v1_workflows__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/workflows/{workflow_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Read Workflow
     * @description Get workflow by ID.
     */
    get: operations["read_workflow_api_v1_workflows__workflow_id__get"];
    /**
     * Update Workflow
     * @description Update workflow.
     */
    put: operations["update_workflow_api_v1_workflows__workflow_id__put"];
    post?: never;
    /**
     * Delete Workflow
     * @description Delete workflow.
     */
    delete: operations["delete_workflow_api_v1_workflows__workflow_id__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/workflows/{workflow_id}/run": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Run Workflow
     * @description Execute a workflow.
     */
    post: operations["run_workflow_api_v1_workflows__workflow_id__run_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/workflows/{workflow_id}/runs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Read Workflow Runs
     * @description Get workflow execution history.
     */
    get: operations["read_workflow_runs_api_v1_workflows__workflow_id__runs_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Root */
    get: operations["root__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health Check */
    get: operations["health_check_health_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** Body_login_api_v1_auth_login_post */
    Body_login_api_v1_auth_login_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /**
       * Password
       * Format: password
       */
      password: string;
      /**
       * Scope
       * @default
       */
      scope: string;
      /** Client Id */
      client_id?: string | null;
      /**
       * Client Secret
       * Format: password
       */
      client_secret?: string | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * RunStatus
     * @enum {string}
     */
    RunStatus: "pending" | "running" | "success" | "failed" | "cancelled";
    /** Token */
    Token: {
      /** Access Token */
      access_token: string;
      /**
       * Token Type
       * @default bearer
       */
      token_type: string;
    };
    /** UserCreate */
    UserCreate: {
      /** Email */
      email: string;
      /** Username */
      username: string;
      /** Full Name */
      full_name?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /**
       * Is Superuser
       * @default false
       */
      is_superuser: boolean;
      /** Password */
      password: string;
    };
    /** UserRead */
    UserRead: {
      /** Email */
      email: string;
      /** Username */
      username: string;
      /** Full Name */
      full_name?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /**
       * Is Superuser
       * @default false
       */
      is_superuser: boolean;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Updated At */
      updated_at?: string | null;
    };
    /** UserUpdate */
    UserUpdate: {
      /** Email */
      email?: string | null;
      /** Username */
      username?: string | null;
      /** Full Name */
      full_name?: string | null;
      /** Password */
      password?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Is Superuser */
      is_superuser?: boolean | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** WorkflowCreate */
    WorkflowCreate: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** @default draft */
      status: components["schemas"]["WorkflowStatus"];
      /**
       * Configuration
       * @default {}
       */
      configuration: {
        [key: string]: unknown;
      };
      /**
       * Steps
       * @default []
       */
      steps: components["schemas"]["WorkflowStepCreate"][];
    };
    /** WorkflowRead */
    WorkflowRead: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** @default draft */
      status: components["schemas"]["WorkflowStatus"];
      /**
       * Configuration
       * @default {}
       */
      configuration: {
        [key: string]: unknown;
      };
      /** Id */
      id: number;
      /** User Id */
      user_id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Steps
       * @default []
       */
      steps: components["schemas"]["WorkflowStepRead"][];
    };
    /** WorkflowRunRead */
    WorkflowRunRead: {
      /** Workflow Id */
      workflow_id: number;
      /** @default pending */
      status: components["schemas"]["RunStatus"];
      /** Error Message */
      error_message?: string | null;
      /**
       * Logs
       * @default []
       */
      logs: {
        [key: string]: unknown;
      }[];
      /** Id */
      id: number;
      /** Started At */
      started_at?: string | null;
      /** Completed At */
      completed_at?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /**
     * WorkflowStatus
     * @enum {string}
     */
    WorkflowStatus: "draft" | "active" | "paused" | "archived";
    /** WorkflowStepCreate */
    WorkflowStepCreate: {
      /** Name */
      name: string;
      /** Type */
      type: string;
      /**
       * Configuration
       * @default {}
       */
      configuration: {
        [key: string]: unknown;
      };
      /** Position */
      position: number;
    };
    /** WorkflowStepRead */
    WorkflowStepRead: {
      /** Name */
      name: string;
      /** Type */
      type: string;
      /**
       * Configuration
       * @default {}
       */
      configuration: {
        [key: string]: unknown;
      };
      /** Position */
      position: number;
      /** Id */
      id: number;
      /** Workflow Id */
      workflow_id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Updated At */
      updated_at?: string | null;
    };
    /** WorkflowUpdate */
    WorkflowUpdate: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      status?: components["schemas"]["WorkflowStatus"] | null;
      /** Configuration */
      configuration?: {
        [key: string]: unknown;
      } | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  login_api_v1_auth_login_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login_api_v1_auth_login_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  read_users_api_v1_users__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserRead"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_user_api_v1_users__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  read_user_me_api_v1_users_me_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
    };
  };
  update_user_me_api_v1_users_me_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  read_user_by_id_api_v1_users__user_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        user_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  read_workflows_api_v1_workflows__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WorkflowRead"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_workflow_api_v1_workflows__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WorkflowRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  read_workflow_api_v1_workflows__workflow_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workflow_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WorkflowRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_workflow_api_v1_workflows__workflow_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workflow_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WorkflowRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_workflow_api_v1_workflows__workflow_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workflow_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  run_workflow_api_v1_workflows__workflow_id__run_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workflow_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WorkflowRunRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  read_workflow_runs_api_v1_workflows__workflow_id__runs_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      header?: never;
      path: {
        workflow_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WorkflowRunRead"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  health_check_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
