"""initial_schema

Revision ID: 336cd2112550
Revises: 
Create Date: 2025-09-25 11:26:37.289246

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import Enum
from tenflow.models import WorkoutTimeOfDay, IntensityZone

# revision identifiers, used by Alembic.
revision: str = '336cd2112550'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('full_name', sa.String(length=50), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('access_token', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('compliance_scores',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('week_start', sa.Date(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('workout_compliance', sa.Numeric(), nullable=True),
    sa.Column('intensity_compliance', sa.Numeric(), nullable=True),
    sa.Column('recovery_compliance', sa.Numeric(), nullable=True),
    sa.Column('overall_compliance', sa.Numeric(), nullable=True),
    sa.Column('activities_prescribed', sa.Integer(), nullable=True),
    sa.Column('activities_completed', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('strava_connections',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('strava_user_id', sa.String(length=50), nullable=False),
    sa.Column('access_token', sa.String(length=50), nullable=False),
    sa.Column('refresh_token', sa.String(length=50), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('athlete_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('connected_at', sa.DateTime(), nullable=False),
    sa.Column('last_sync', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('training_plans',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('goal', sa.String(length=50), nullable=False),
    sa.Column('plan_name', sa.String(length=50), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('duration_weeks', sa.Integer(), nullable=False),
    sa.Column('fitness_level', sa.String(length=50), nullable=False),
    sa.Column('weekly_distance_base', sa.Numeric(), nullable=False),
    sa.Column('weekly_distance_peak', sa.Numeric(), nullable=False),
    sa.Column('training_days_per_week', sa.Integer(), nullable=False),
    sa.Column('plan_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('prescribed_workouts',
    sa.Column('training_plan_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('workout_date', sa.Date(), nullable=False),
    sa.Column('workout_time', Enum(WorkoutTimeOfDay), nullable=False),
    sa.Column('workout_type', sa.String(length=50), nullable=False),
    sa.Column('distance', sa.Numeric(), nullable=False),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('intensity_zone', Enum(IntensityZone), nullable=True),
    sa.Column('rpe_target', sa.Integer(), nullable=True),
    sa.Column('workout_description', sa.String(length=1000), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('workout_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['training_plan_id'], ['training_plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('training_activities',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=1000), nullable=False),
    sa.Column('activity_type', sa.String(length=50), nullable=False),
    sa.Column('prescribed_workout_id', sa.UUID(), nullable=False),
    sa.Column('actual_workout', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('activity_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('strava_activity_id', sa.String(length=50), nullable=True),
    sa.Column('distance', sa.Numeric(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('compliance_score', sa.Numeric(), nullable=True),
    sa.Column('moving_time', sa.Integer(), nullable=True),
    sa.Column('elapsed_time', sa.Integer(), nullable=True),
    sa.Column('total_elevation_gain', sa.Numeric(), nullable=True),
    sa.Column('average_heartrate', sa.Integer(), nullable=True),
    sa.Column('max_heartrate', sa.Integer(), nullable=True),
    sa.Column('rpe_prescribed', sa.Integer(), nullable=True),
    sa.Column('rpe_actual', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['prescribed_workout_id'], ['prescribed_workouts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('training_activities')
    op.drop_table('prescribed_workouts')
    op.drop_table('training_plans')
    op.drop_table('strava_connections')
    op.drop_table('compliance_scores')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.execute('DROP TYPE IF EXISTS workouttimeofday')
    op.execute('DROP TYPE IF EXISTS intensityzone')
    # ### end Alembic commands ###
