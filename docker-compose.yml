services:
  postgres:
    image: postgres:16-alpine
    container_name: tenflow-postgres
    env_file:
      - docker.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=tenflow

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tenflow-backend
    env_file:
      - docker.env
    ports:
      - "8000:8000"
    volumes:
      # Mount the entire app directory for hot reloading
      - ./backend/src:/app/src
      - ./backend/scripts:/app/scripts
      - ./backend/alembic:/app/alembic
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        uv run uvicorn tenflow.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app
      "

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: tenflow-frontend
    environment:
      - NODE_ENV=development
      - BACKEND_URL=http://backend:8000
    ports:
      - "5173:5173"
    volumes:
      # Mount source code for hot reloading
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      # Mount config files
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tailwind.config.js:/app/tailwind.config.js
      - ./frontend/postcss.config.js:/app/postcss.config.js
      # Use named volume for node_modules to avoid conflicts
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0

volumes:
  postgres_data:
  frontend_node_modules:
